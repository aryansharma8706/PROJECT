import { jsx as l, Fragment as m } from "react/jsx-runtime";
import { useEffect as d, useCallback as s, useState as p } from "react";
import { useBlocker as k, useBeforeUnload as x } from "react-router";
function b(o, n) {
  const t = k(o);
  return d(() => {
    t.state === "blocked" && t.location && n && n(t.location), t.state === "blocked" && !o && t.reset();
  }, [t, o, n]), x(
    s(
      (e) => {
        (typeof o == "boolean" && o === !0 || // @ts-expect-error Reload case -- No location present
        typeof o == "function" && o()) && (e.preventDefault(), e.returnValue = "Changes that you made may not be saved.");
      },
      [o]
    ),
    { capture: !0 }
  ), t;
}
const y = (o) => {
  const [n, t] = p(null), e = b(o, (c) => {
    t(c);
  }), r = () => {
    e.state === "blocked" && e.reset();
  }, i = () => {
    e.state === "blocked" && setTimeout(e.proceed, 0);
  };
  return {
    isActive: e.state === "blocked",
    onConfirm: i,
    resetConfirmation: r,
    nextLocation: n || void 0
  };
};
function v({
  when: o,
  children: n,
  beforeCancel: t,
  beforeConfirm: e
}) {
  const { isActive: r, onConfirm: i, resetConfirmation: c, nextLocation: a } = y(o), u = s(async () => {
    e && await e(), i();
  }, [e, i]), f = s(async () => {
    t && await t(), c();
  }, [t, c]);
  return r ? /* @__PURE__ */ l(m, { children: n({
    isActive: !0,
    onConfirm: u,
    onCancel: f,
    nextLocation: a || void 0
  }) }) : null;
}
export {
  v as default,
  y as useConfirm,
  b as usePrompt
};
